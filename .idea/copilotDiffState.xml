<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/LOG_ISSUES_FIXED.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LOG_ISSUES_FIXED.md" />
              <option name="updatedContent" value="# Log Issues Analysis and Fixes - October 10, 2025&#10;&#10;## Issues Identified&#10;&#10;### 1. **Excessive DEBUG Log Spam (404 Errors)**&#10;**Symptom:** &#10;```&#10;22:32:05.723 [ValorantChatPoller] DEBUG com.someone.valvoice.APIHandler -- Request https://127.0.0.1:55864/chat/v6/messages failed with status 404 body {&quot;errorCode&quot;:&quot;RESOURCE_NOT_FOUND&quot;,&quot;httpStatus&quot;:404,&quot;message&quot;:&quot;Invalid URI format&quot;}&#10;```&#10;Repeating every 2 seconds, flooding the logs.&#10;&#10;**Root Cause:** &#10;- The chat API endpoints (`/chat/v6/messages`, `/chat/v5/messages`, `/chat/v1/session`) return 404 when:&#10;  1. Valorant is not running in an active game session&#10;  2. The Riot Client is connected but no game is active&#10;  3. The chat service is not available yet&#10;- Every failed request was logging at DEBUG level, creating excessive noise&#10;&#10;**Fix Applied:**&#10;- Added consecutive failure tracking in `APIHandler.java`&#10;- Only logs first 10 failures, then logs every 50th failure to prevent spam&#10;- Logs an INFO message when connection is restored&#10;- `ChatListenerService.java` already had backoff logic, which is working correctly&#10;&#10;### 2. **TTS Interruption During Shutdown**&#10;**Symptom:**&#10;```&#10;22:32:09.134 [TTS-Worker] WARN com.someone.valvoice.TtsEngine -- Failed to speak text: Hey team from PARTY&#10;java.lang.InterruptedException: null&#10;```&#10;&#10;**Root Cause:**&#10;- Application shutdown was triggered while TTS was actively speaking&#10;- The PowerShell process was forcibly destroyed mid-execution&#10;- InterruptedException was being logged as a WARNING, making it seem like an error&#10;&#10;**Fix Applied:**&#10;- Added shutdown check at the start of `execSpeak()` to prevent starting new TTS when shutting down&#10;- Changed InterruptedException handling to only log DEBUG (not WARNING) when `running` flag is true&#10;- Proper interrupt status restoration with `Thread.currentThread().interrupt()`&#10;- Graceful process cleanup with timeout before forcibly destroying&#10;&#10;### 3. **Premature Application Shutdown**&#10;**Symptom:**&#10;```&#10;Process finished with exit code 130&#10;```&#10;(Exit code 130 = 128 + 2 = SIGINT = Ctrl+C)&#10;&#10;**Root Cause:**&#10;- The application was manually terminated by the user (Ctrl+C in console)&#10;- This is expected behavior when running from IDE and user wants to stop&#10;- However, it happened very quickly after startup, suggesting the user closed it&#10;&#10;**No Fix Needed:** This is user-initiated termination, not a bug.&#10;&#10;## Summary of Changes&#10;&#10;### Files Modified:&#10;&#10;#### 1. `TtsEngine.java`&#10;- Enhanced `execSpeak()` method with better interruption handling&#10;- Added early return check for shutdown state&#10;- Improved process cleanup with timeout&#10;- Reduced log noise for interrupted TTS during shutdown&#10;&#10;#### 2. `APIHandler.java`&#10;- Added `consecutiveFailures` counter and `FAILURE_LOG_THRESHOLD` constant&#10;- Modified `send()` method to track failures and reduce log spam&#10;- Logs restoration message when API becomes available again&#10;- Only logs failures initially and periodically after threshold&#10;&#10;## Expected Behavior After Fixes&#10;&#10;### When Valorant is NOT Running:&#10;- First 10 failed API calls will show DEBUG logs&#10;- After that, only every 50th failure logs (significantly reduced spam)&#10;- ChatListenerService polls with exponential backoff (2s → 30s max)&#10;- Application remains responsive and ready to detect when Valorant starts&#10;&#10;### When Application Shuts Down:&#10;- TTS interruptions won't log as WARNING&#10;- Processes clean up gracefully&#10;- No scary-looking stack traces in logs&#10;&#10;### When Valorant STARTS:&#10;- API connection will be detected&#10;- Log will show: &quot;API connection restored after X consecutive failures&quot;&#10;- Normal chat polling resumes at 2-second intervals&#10;- Messages will be properly narrated via TTS&#10;&#10;## Additional Notes&#10;&#10;### The 404 Errors Are Expected&#10;The Riot Client Local API endpoints for chat messages are only available when:&#10;1. Valorant is running&#10;2. Player is in a game (pregame, in-game, or post-game lobby)&#10;3. Chat service is initialized&#10;&#10;When just the Riot Client is running (without active Valorant session), these endpoints return 404. This is normal behavior, not an error.&#10;&#10;### VB-Audio Virtual Cable Warning&#10;```&#10;WARN ValVoiceController -- VB-Audio Virtual Cable devices missing or incomplete&#10;```&#10;This is **not fixed** in this update because it requires user action:&#10;- User needs to install VB-CABLE Virtual Audio Device&#10;- Download from: https://vb-audio.com/Cable/&#10;- This routes TTS audio to Valorant's microphone input&#10;- Without it, TTS will play through speakers but not in-game voice chat&#10;&#10;### XMPP Bridge Status&#10;The application is correctly using the embedded `xmpp-node.js` stub since:&#10;- `valvoice-xmpp.exe` is not built&#10;- Node.js/npm are not available for auto-build&#10;- This is working as designed for the fallback mode&#10;&#10;## Testing Recommendations&#10;&#10;1. **Test with Valorant Running:**&#10;   - Start Valorant and enter a game&#10;   - Verify chat messages are detected and narrated&#10;   - Check that DEBUG logs are at reasonable levels&#10;&#10;2. **Test Shutdown:**&#10;   - Send a test message during TTS playback&#10;   - Immediately close the application&#10;   - Verify no WARNING logs for TTS interruption&#10;&#10;3. **Test API Recovery:**&#10;   - Start app while Valorant is not running (see 10 DEBUG logs)&#10;   - Start Valorant and enter a game&#10;   - Verify INFO log shows &quot;API connection restored&quot;&#10;&#10;## Conclusion&#10;&#10;The application is now more production-ready with:&#10;- ✅ Reduced log spam when Valorant is not running&#10;- ✅ Graceful shutdown without scary error messages  &#10;- ✅ Better feedback when connection is lost/restored&#10;- ✅ Proper resource cleanup&#10;&#10;The main &quot;errors&quot; in the logs were actually expected behavior being logged at inappropriate levels. The fixes make the logging more appropriate for production use.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/STATUS_BAR_IMPROVEMENTS.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/STATUS_BAR_IMPROVEMENTS.md" />
              <option name="updatedContent" value="# Status Bar UI Improvements&#10;&#10;## Changes Made&#10;&#10;### 1. Enhanced CSS Styling (`style.css`)&#10;- **Increased visibility**: Brightened all status indicator colors&#10;  - Green (OK): `#00ff88` with glowing effect&#10;  - Yellow (Warning): `#ffcc00` with glowing effect&#10;  - Red (Error): `#ff4444` with glowing effect&#10;  - Blue (Info): `#00d4ff` with glowing effect&#10;&#10;- **Better contrast**: &#10;  - Status bar background: Dark gradient with cyan border&#10;  - Status labels: Rounded badges with 2px borders&#10;  - Glowing drop shadows for better visibility&#10;&#10;- **Proper alignment**:&#10;  - Fixed height: 40px for consistent layout&#10;  - Proper padding: 10px vertical, 20px horizontal&#10;  - Minimum width for status labels: 80px&#10;&#10;### 2. Updated Java Controller (`ValVoiceController.java`)&#10;- **Replaced inline styles with CSS classes**: &#10;  - Removed hardcoded color styles&#10;  - Added methods to apply proper CSS style classes&#10;  - Status indicators now use: `status-ok`, `status-warning`, `status-error`, `status-info`&#10;&#10;- **New method added**: `updateStatusLabelWithType()`&#10;  - Allows precise control over status type (ok/warning/error/info)&#10;  - Properly removes old classes before applying new ones&#10;&#10;### 3. FXML Updates (`mainApplication.fxml`)&#10;- Added `styleClass=&quot;status-label-static&quot;` for field labels (XMPP:, VB-Cable:, etc.)&#10;- Added `styleClass=&quot;status-label&quot;` for value labels&#10;- Ensured consistent styling across all status indicators&#10;&#10;## Visual Result&#10;The status bar at the bottom now displays:&#10;- **Bright, glowing indicators** that are clearly visible&#10;- **Green badges** for successful/ready states (VB-Cable detected, XMPP ready, etc.)&#10;- **Yellow badges** for warnings (checking, pending states)&#10;- **Proper alignment** with consistent spacing and sizing&#10;- **Professional appearance** with rounded corners and shadows&#10;&#10;## Status Indicators&#10;1. **XMPP**: Shows if XMPP bridge is ready&#10;2. **Mode**: External-exe vs embedded-script&#10;3. **VB-Cable**: Virtual audio cable detection&#10;4. **Audio Routing**: Audio routing status&#10;5. **Self ID**: Current player identity&#10;&#10;All indicators now have high contrast and are easily readable at a glance!&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>